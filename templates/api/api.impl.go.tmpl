// Code generated by zen. DO NOT EDIT.
package api

import (
	"context"
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/common"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/labstack/gommon/log"
)

type AuthService interface {
	SignUp(
		ctx context.Context, 
		body *gen.SignUp,
	) (*gen.AuthResponse, error)

	SignIn(
		ctx context.Context, 
		body *gen.SignIn,
	) (*gen.AuthResponse, error)
}

{{- range $index, $resource := .Api.Resources}}
type {{ $resource.ModelRef | title | singularize }}Service interface {
	Get{{ $resource.ModelRef | title | singularize }}(
		ctx context.Context,
		{{- if eq $resource.Security "BearerAuth"}}
		user *common.AuthUser,
		{{- end }}
		id string,
	) (*gen.{{ $resource.ModelRef | title | singularize }}, error) 

	List{{ $resource.ModelRef | title }}(
		ctx context.Context,
		{{- if eq $resource.Security "BearerAuth"}}
		user *common.AuthUser,
		{{- end }}
		params *gen.List{{ $resource.ModelRef | title }}Params,
	) (*gen.{{ $resource.ModelRef | title }}, error) 

	Create{{ $resource.ModelRef | title | singularize }}(
		ctx context.Context,
		{{- if eq $resource.Security "BearerAuth"}}
		user *common.AuthUser,
		{{- end }}
		body *gen.{{ $resource.ModelRef | title | singularize }},
	) (*gen.{{ $resource.ModelRef | title | singularize}}, error) 

	Update{{ $resource.ModelRef | title | singularize }}(
		ctx context.Context,
		{{- if eq $resource.Security "BearerAuth"}}
		user *common.AuthUser,
		{{- end }}
		id string,
		body *gen.{{ $resource.ModelRef | title | singularize }},
	) (*gen.{{ $resource.ModelRef | title | singularize }}, error) 

	Delete{{ $resource.ModelRef | title | singularize }}(
		ctx context.Context,
		{{- if eq $resource.Security "BearerAuth"}}
		user *common.AuthUser,
		{{- end }}
		id string,
	) error
}
{{ end }}

type ApiService struct {
	AuthService
{{- range $index, $resource := .Api.Resources}}
	{{ $resource.ModelRef | title | singularize }}Service
{{- end }}
}

type ServerImpl struct {
	service ApiService
}

func NewServerImpl(
	authService AuthService,
{{- range $index, $resource := .Api.Resources}}
	{{ $resource.ModelRef | untitle | singularize }}Service {{ $resource.ModelRef | title | singularize }}Service,
{{- end }}
) ServerImpl {
	return ServerImpl{
		service: ApiService{
			AuthService: authService,
{{- range $index, $resource := .Api.Resources}}
			{{ $resource.ModelRef | title | singularize }}Service: {{ $resource.ModelRef | untitle | singularize }}Service,
{{- end }}
		},
	}
}

// Auth
func (s *ServerImpl) SignIn(
	ctx echo.Context,
) error {
	var body gen.SignIn
	err := ctx.Bind(&body)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx,
			http.StatusBadRequest,
			10000,
			"Invalid request body",
		)
	}

	resp, err := s.service.SignIn(
		ctx.Request().Context(),
		&body,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx,
			http.StatusInternalServerError,
			10001,
			"Failed to signIn",
		)
	}

	return ctx.JSON(200, resp)
}

func (s *ServerImpl) SignUp(
	ctx echo.Context,
) error {
	var body gen.SignUp
	err := ctx.Bind(&body)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx,
			http.StatusBadRequest,
			10000,
			"Invalid request body",
		)
	}

	resp, err := s.service.SignUp(
		ctx.Request().Context(),
		&body,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx,
			http.StatusInternalServerError,
			10001,
			"Failed to signUp",
		)
	}

	return ctx.JSON(200, resp)
}

{{ range $index, $resource := .Api.Resources }}

// {{ $resource.ModelRef | title }}
func (s *ServerImpl) List{{ $resource.ModelRef | title }}(
	ctx echo.Context,
	params gen.List{{ $resource.ModelRef | title }}Params,
) error {
	{{- if eq .Security "BearerAuth" }}
	user := GetAuthUserFromContext(ctx)
	{{- end }}

	resp, err := s.service.List{{ $resource.ModelRef | title }}(
		ctx.Request().Context(),
		{{- if eq .Security "BearerAuth" }}
		user,
		{{- end }}
		&params,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusInternalServerError, 
			10001, 
			"Failed to list{{ $resource.ModelRef | title }}",
		)
	}

	return ctx.JSON(200, resp)
}

func (s *ServerImpl) Get{{ $resource.ModelRef | title | singularize }}(
	ctx echo.Context,
	id string,
) error {
	{{- if eq .Security "BearerAuth" }}
	user := GetAuthUserFromContext(ctx)
	{{- end }}

	resp, err := s.service.Get{{ $resource.ModelRef | title | singularize }}(
		ctx.Request().Context(),
		{{- if eq .Security "BearerAuth" }}
		user,
		{{- end }}
		id,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusInternalServerError, 
			10001, 
			"Failed to get{{ $resource.ModelRef | title | singularize }}",
		)
	}

	return ctx.JSON(200, resp)
}

func (s *ServerImpl) Create{{ $resource.ModelRef | title | singularize }}(
	ctx echo.Context,
) error {
	{{- if eq .Security "BearerAuth" }}
	user := GetAuthUserFromContext(ctx)
	{{- end }}

	var body gen.{{ $resource.ModelRef | title | singularize }}
	err := ctx.Bind(&body)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusBadRequest, 
			10000, 
			"Invalid request body",
		)
	}

	resp, err := s.service.Create{{ $resource.ModelRef | title | singularize }}(
		ctx.Request().Context(),
		{{- if eq .Security "BearerAuth" }}
		user,
		{{- end }}
		&body,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusInternalServerError, 
			10001, 
			"Failed to get{{ $resource.ModelRef | title | singularize }}",
		)
	}

	return ctx.JSON(201, resp)
}

func (s *ServerImpl) Update{{ $resource.ModelRef | title | singularize }}(
	ctx echo.Context,
	id string,
) error {
	{{- if eq .Security "BearerAuth" }}
	user := GetAuthUserFromContext(ctx)
	{{- end }}

	var body gen.{{ $resource.ModelRef | title | singularize }}
	err := ctx.Bind(&body)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusBadRequest, 
			10000, 
			"Invalid request body",
		)
	}

	resp, err := s.service.Update{{ $resource.ModelRef | title | singularize }}(
		ctx.Request().Context(),
		{{- if eq .Security "BearerAuth" }}
		user,
		{{- end }}
		id,
		&body,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusInternalServerError, 
			10001, 
			"Failed to update{{ $resource.ModelRef | title | singularize }}",
		)
	}

	return ctx.JSON(200, resp)
}

func (s *ServerImpl) Delete{{ $resource.ModelRef | title | singularize }}(
	ctx echo.Context,
	id string,
) error {
	{{- if eq .Security "BearerAuth" }}
	user := GetAuthUserFromContext(ctx)
	{{- end }}

	err := s.service.Delete{{ $resource.ModelRef | title | singularize }}(
		ctx.Request().Context(),
		{{- if eq .Security "BearerAuth" }}
		user,
		{{- end }}
		id,
	)

	if err != nil {
		log.Error(err)
		return sendError(
			ctx, 
			http.StatusInternalServerError, 
			10001, 
			"Failed to delete{{ $resource.ModelRef | title | singularize }}",
		)
	}

	return ctx.JSON(200, err)
}
{{- end}}

func sendError(
	ctx echo.Context, 
	statusCode int, 
	code int, 
	message string,
) error {
	resp := gen.Error{
		Code:    code,
		Message: message,
	}

	err := ctx.JSON(statusCode, resp)

	return err
}
