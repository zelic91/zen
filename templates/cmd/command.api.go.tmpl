package cmd

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"{{ .ModuleName }}/api"
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/auth"
	"{{ .ModuleName }}/config"
	"{{ .ModuleName }}/db/postgres"
	// "{{ .ModuleName }}/db/mongo"
{{- range $index, $model := .Models }}
	"{{ $.ModuleName }}/{{ $model.Name | snakecase }}"
{{- end }}
	"{{ .ModuleName }}/user"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	_ "github.com/lib/pq"
	"github.com/spf13/cobra"
)

var {{ .Command }}Cmd = &cobra.Command{
	Use:   "{{ .Command }}",
	Short: "Start API server",
	Long:  `Start API server`,
	Run:   RunCommand,
}

func init() {
	rootCmd.AddCommand({{ .Command }}Cmd)
}

func RunCommand(cmd *cobra.Command, args []string) {

	config := config.Init()
	postgresDB := postgres.Init(config)
	// mongoDB := mongo.Init(config)

	e := echo.New()
	g := e.Group("/api/v1")

	jwtKey := config.JWTKey
	if len(jwtKey) == 0 {
		jwtKey = "MEZGMEFDRTYtRTEyRS00RTdGLUJCNjYtMTVGODc4RUE4NjIyCg=="
	}

	authenticator := api.NewAppAuthenticator(jwtKey)

	authMiddleware, err := api.CreateAuthMiddleware(authenticator)

	if err != nil {
		log.Fatal(err)
	}

	e.Use(middleware.CORS())
	g.Use(middleware.CORS())
	g.Use(authMiddleware...)
	g.Use(middleware.Logger())

	userRepo := user.NewRepo(postgresDB)

	userService := user.NewService(&userRepo)
	authService := auth.NewService(authenticator, userService)

{{ range $index, $db := .Databases }}
	{{- if eq $db.Type "postgres" }}
		{{ range $index, $model := $db.Models }}
	{{ $model.Name | untitle }}Repo := {{ $model.Name | untitle }}.NewRepo(postgresDB)
		{{- end }}
	{{- else if eq .Type "mongo" }}	
		{{ range $index, $model := $db.Models }}
	{{ $model.Name | untitle }}Collection := mongoDB.Database(config.MongoDatabase).Collection("{{ $model.Name }}")
	{{ $model.Name | untitle }}Repo := {{ $model.Name | untitle }}.NewRepo({{ $model.Name | untitle }}Collection)
		{{- end }}
	{{- end }}
{{ end }}

{{ range $index, $db := .Databases }}
		{{ range $index, $model := $db.Models }}
	{{ $model.Name | untitle }}Service := {{ $model.Name | untitle }}.NewService(&{{ $model.Name | untitle }}Repo)
		{{- end }}
{{ end }}

	serverImpl := api.NewServerImpl(
		{{- range $index, $resource := .Api.Resources }}
		{{ $resource.Model.Name | untitle }}Service,
		{{- end }}
	)

	gen.RegisterHandlersWithBaseURL(e, &serverImpl, "api/v1")

	go func() {
		if err := e.Start(fmt.Sprintf("0.0.0.0:%d", config.Port)); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		log.Println("Cannot shutdown")
		e.Logger.Fatal(err)
	}

	log.Println("Shutting down")
}
