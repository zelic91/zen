package config

import (
	"fmt"
	"log"
	"github.com/spf13/viper"
)

type Config struct {
{{- range $name, $value := .Env }}
	{{ if .StructName }}{{ .StructName }}{{ else }}{{ $name | lower | camelcase }}{{ end }} {{ .Type }} `mapstructure:"{{ $name }}"`
{{- end }}
}

func Init() *Config {
	viper.SetConfigName(".env")
	viper.SetConfigType("env")
	viper.AddConfigPath(".")

{{- range $name, $value := .Env }}
	viper.BindEnv("{{ $name }}")
{{- end }}

	viper.AutomaticEnv()

	// For .env file only
	err := viper.ReadInConfig()

	if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
		log.Fatalf("cannot init config %v", err)
	}

	conf := &Config{}
	err = viper.Unmarshal(conf)
	if err != nil {
		fmt.Printf("unable to decode into config struct, %v", err)
	}

	return conf
}
