package mongo

import (
	"context"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

{{- range .Databases }}
    {{- if eq .Type "mongo" }}
        {{range $modelName, $model := .Models }}

// {{ $modelName | title }}
type {{ $modelName | singularize | title }}Repo interface {
	InsertOne(ctx context.Context, model *{{ $modelName | singularize | title }}) (interface{}, error)
	FindByID(ctx context.Context, id primitive.ObjectID) (*{{ $modelName | singularize | title }}, error)
	FindAll(ctx context.Context) ([]*{{ $modelName | singularize | title }}, error)
	UpdateByID(ctx context.Context, model *{{ $modelName | singularize | title }}, id primitive.ObjectID) (bool, error)
	DeleteByID(ctx context.Context, id primitive.ObjectID) (bool, error)
	DeleteAll(ctx context.Context) (int, error)
{{- if eq .Type "user" }}
	FindByUsername(ctx context.Context, username string) (*{{ $modelName | singularize | title }}, error)
	FindByEmail(ctx context.Context, email string) (*{{ $modelName | singularize | title }}, error)
{{- end }}
}

type {{ $modelName | singularize | title }} struct {
	ID        primitive.ObjectID `json:"id" bson:"_id,omitempty"`
{{- if eq .Type "user" }}
	FirstName      string             `json:"first_name" bson:"first_name"`
	LastName       string             `json:"last_name" bson:"last_name"`
	Username       string             `json:"username" bson:"username"`
	Email          string             `json:"email" bson:"email"`
	PasswordHashed string             `json:"password_hashed" bson:"password_hashed"`
	PasswordSalt   string             `json:"password_salt" bson:"password_salt"`
	Status         string             `json:"status" bson:"status"`
{{- end }}
{{- range $propertyName, $property := .Properties }}
	{{ $propertyName | camelcase }}    {{ .Type }}             `json:"{{ $modelName | lower }}" bson:"{{ $modelName | lower }}"`
{{- end }}
	CreatedBy primitive.ObjectID `json:"created_by" bson:"created_by"`
	UpdatedBy primitive.ObjectID `json:"updated_by" bson:"updated_by"`
	DeletedBy primitive.ObjectID `json:"deleted_by" bson:"deleted_by"`
	CreatedAt time.Time          `json:"created_at" bson:"created_at"`
	UpdatedAt time.Time          `json:"updated_at" bson:"updated_at"`
	DeletedAt time.Time          `json:"deleted_at" bson:"deleted_at"`
}


		{{- end }}
	{{- end }}
{{- end }}

