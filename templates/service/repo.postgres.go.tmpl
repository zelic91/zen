package {{ .CurrentPackage }}

import (
	"context"
	"{{ .ModuleName }}/db/postgres"
	"{{ .ModuleName }}/db/postgres/dbgen"
	
	"github.com/jmoiron/sqlx"
)

type Repo struct {
	db    *sqlx.DB
	query *dbgen.Queries
}

func NewRepo(db *sqlx.DB) Repo {
	return Repo{
		db:    db,
		query: dbgen.New(db),
	}
}

func (r Repo) FindAll(
	ctx context.Context,
	search string,
	limit int,
	offset int,
) ([]*dbgen.{{ .CurrentModelName | singularize | title }}, error) {
	params := dbgen.List{{ .CurrentModelName | title }}Params{
		Column1: postgres.ToNullString(&search),
		Limit:   int32(limit),
		Offset:  int32(offset),
	}
	return r.query.List{{ .CurrentModelName | title }}(ctx, params)
}

func (r Repo) FindByID(
	ctx context.Context,
	id int64,
) (*dbgen.{{ .CurrentModelName | singularize | title }}, error) {
	return r.query.Get{{ .CurrentModelName | singularize | title }}ById(ctx, id)
}

func (r Repo) Create(
	ctx context.Context,
{{- if eq .CurrentModel.Type "user" }}
	{{- range $propertyName, $property := userProperties }}
	{{ $propertyName | camelcase | untitle }} {{- if .NotNull }} {{ .Type }}{{- else }} *{{ .Type }}{{- end }},
	{{- end }}
{{- end }}
{{- range $propertyName, $property := .CurrentModel.Properties }}
	{{ $propertyName | camelcase | untitle }} {{ .Type }},
{{- end }}
) (*dbgen.{{ .CurrentModelName | singularize | title }}, error) {
	params := dbgen.Create{{ .CurrentModelName | singularize | title }}Params{
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
		{{ $propertyName | camelcase | title }}: {{- if $property.NotNull}}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNullString({{ $propertyName | camelcase | untitle }}){{- end }},
		{{- end }}
	{{- end }}
	{{- range $propertyName, $property := .CurrentModel.Properties }}
		{{ $propertyName | camelcase | title }}: {{- if $property.NotNull}}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNullString({{ $propertyName | camelcase | untitle }}){{- end }},
	{{- end }}
	}

	return r.query.Create{{ .CurrentModelName | singularize | title }}(ctx, params)
}

func (r Repo) Update(
	ctx context.Context,
	id int64,
{{- if eq .CurrentModel.Type "user" }}
	{{- range $propertyName, $property := userProperties }}
	{{ $propertyName | camelcase | untitle }} {{- if .NotNull }} {{ .Type }}{{- else }} *{{ .Type }}{{- end }},
	{{- end }}
{{- end }}
{{- range $propertyName, $property := .CurrentModel.Properties }}
	{{ $propertyName | camelcase | untitle }} {{ .Type }},
{{- end }}
) (*dbgen.{{ .CurrentModelName | singularize | title }}, error) {
	params := dbgen.Update{{ .CurrentModelName | singularize | title }}Params{
	ID: id,
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
		{{ $propertyName | camelcase | title }}: {{- if $property.NotNull}}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNullString({{ $propertyName | camelcase | untitle }}){{- end }},
		{{- end }}
	{{- end }}
	{{- range $propertyName, $property := .CurrentModel.Properties }}
		{{ $propertyName | camelcase | title }}: {{- if $property.NotNull}}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNullString({{ $propertyName | camelcase | untitle }}){{- end }},
	{{- end }}
	}

	return r.query.Update{{ .CurrentModelName | singularize | title }}(ctx, params)
}
