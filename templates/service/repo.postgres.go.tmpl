package {{ .Model.Name | untitle | singularize }}

import (
	"context"
	"strconv"
	"{{ .ModuleName }}/db/postgres"
	"{{ .ModuleName }}/db/postgres/dbgen"
	
	"github.com/jmoiron/sqlx"
)

type Repo struct {
	db    *sqlx.DB
	query *dbgen.Queries
}

func NewRepo(db *sqlx.DB) Repo {
	return Repo{
		db:    db,
		query: dbgen.New(db),
	}
}

func (r Repo) FindAll(
	ctx context.Context,
) ([]*dbgen.{{ .Model.Name | singularize | title }}, error) {
	return r.query.FindAll{{ .Model.Name | title }}(ctx)
}

func (r Repo) FindByID(
	ctx context.Context,
	id string,
) (*dbgen.{{ .Model.Name | singularize | title }}, error) {
	idInt64, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}

	return r.query.Find{{ .Model.Name | singularize | title }}ById(ctx, idInt64)
}

func (r Repo) Create(
	ctx context.Context,
{{- range $propertyName, $property := .Model.Properties }}
	{{ $propertyName | camelcase | untitle }} {{ if .Ref }}int64{{ else }}{{- if .NotNull }} {{ .Type }}{{- else }} *{{ .Type }}{{- end }}{{- end }},
{{- end }}
) (*dbgen.{{ .Model.Name | singularize | title }}, error) {
	params := dbgen.Create{{ .Model.Name | singularize | title }}Params{
	{{- range $propertyName, $property := .Model.Properties }}
		{{ $propertyName | camelcase | title | structFieldName }}: {{ if .Ref }}{{ $propertyName | camelcase | untitle }}{{ else }}{{- if $property.NotNull }}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNull{{ .Type | title }}({{ $propertyName | camelcase | untitle }}){{- end }}{{- end }},
	{{- end }}
	}

	return r.query.Create{{ .Model.Name | singularize | title }}(ctx, params)
}

func (r Repo) Update(
	ctx context.Context,
	id string,
{{- range $propertyName, $property := .Model.Properties }}
	{{ $propertyName | camelcase | untitle }} {{ if .Ref }}int64{{ else }}{{- if .NotNull }} {{ .Type }}{{- else }} *{{ .Type }}{{- end }}{{- end }},
{{- end }}
) (*dbgen.{{ .Model.Name | singularize | title }}, error) {
	idInt64, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	params := dbgen.Update{{ .Model.Name | singularize | title }}Params{
		ID: idInt64,
	{{- range $propertyName, $property := .Model.Properties }}
		{{ $propertyName | camelcase | title | structFieldName }}: {{ if .Ref }}{{ $propertyName | camelcase | untitle }}{{ else }}{{- if $property.NotNull }}{{ $propertyName | camelcase | untitle }}{{- else }}postgres.ToNull{{ .Type | title }}({{ $propertyName | camelcase | untitle }}){{- end }}{{- end }},
	{{- end }}
	}

	return r.query.Update{{ .Model.Name | singularize | title }}(ctx, params)
}

func (r Repo) Delete(
	ctx context.Context,
	id string,
) error {
	idInt64, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return err
	}
	return r.query.Delete{{ .Model.Name | singularize | title }}(ctx, idInt64)
}
