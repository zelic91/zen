package {{ .Model.Name | untitle | singularize }}

import (
	"context"
	"log"
	
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/common"
)

type Service struct {
	repo *Repo
}

func NewService(
	repo *Repo,
) *Service {
	return &Service{
		repo: repo,
	}
}

func (s *Service) Get{{ .Resource.ModelRef | title | singularize }}(
	ctx context.Context,
	{{- if eq .Resource.Security "BearerAuth"}}
	user *common.AuthUser,
	{{- end }}
	id string,
) (*gen.{{ .Resource.ModelRef | title | singularize }}, error) {
	res, err := s.repo.FindByID(
		ctx,
		id,
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.{{ .Model.Name | singularize | title }}{
	{{- range $propertyName, $property := .Model.Properties }}
		{{- if eq .Type "string" }}
		{{ $propertyName | camelcase }}: &res.{{ $propertyName | camelcase }}.String,
		{{- else }}
		{{ $propertyName | camelcase }}: res.{{ $propertyName | camelcase | id }},
		{{- end }}
	{{- end }}
	}, nil
}

func (s *Service) List{{ .Resource.ModelRef | title }}(
	ctx context.Context,
	{{- if eq .Resource.Security "BearerAuth"}}
	user *common.AuthUser,
	{{- end }}
	params *gen.List{{ .Resource.ModelRef | title }}Params,
) (*gen.{{ .Resource.ModelRef | title }}, error) {
	res, err := s.repo.FindAll(
		ctx,
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	{{ .Resource.ModelRef }} := []gen.{{ .Resource.ModelRef | title | singularize }}{}
	for _, {{ .Resource.ModelRef | singularize }} := range res {
		{{ .Resource.ModelRef }} = append({{ .Resource.ModelRef }}, gen.{{ .Resource.ModelRef | title | singularize }}{
			{{- range $propertyName, $property := .Model.Properties }}
			{{- if eq .Type "string" }}
			{{ $propertyName | camelcase }}: &{{ $.Resource.ModelRef | singularize }}.{{ $propertyName | camelcase }}.String,
			{{- else }}
			{{ $propertyName | camelcase }}: {{ $.Resource.ModelRef | singularize }}.{{ $propertyName | camelcase | id }},
			{{- end }}
			{{- end }}
		})
	}

	return &gen.{{ .Resource.ModelRef | title }}{
		Data: &{{ .Resource.ModelRef }},
	}, nil
}

func (s *Service) Create{{ .Resource.ModelRef | title | singularize }}(
	ctx context.Context,
	{{- if eq .Resource.Security "BearerAuth"}}
	user *common.AuthUser,
	{{- end }}
	body *gen.{{ .Resource.ModelRef | title | singularize }},
) (*gen.{{ .Resource.ModelRef | title | singularize }}, error) {
	res, err := s.repo.Create(
		ctx,
	{{- range $propertyName, $property := .Model.Properties }}
		body.{{ $propertyName | camelcase }},
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.{{ .Model.Name | singularize | title }}{
	{{- range $propertyName, $property := .Model.Properties }}
		{{- if eq .Type "string" }}
		{{ $propertyName | camelcase }}: &res.{{ $propertyName | camelcase }}.String,
		{{- else }}
		{{ $propertyName | camelcase }}: res.{{ $propertyName | camelcase | id }},
		{{- end }}
	{{- end }}
	}, nil
}

func (s *Service) Update{{ .Resource.ModelRef | title | singularize }}(
	ctx context.Context,
	{{- if eq .Resource.Security "BearerAuth"}}
	user *common.AuthUser,
	{{- end }}
	id string,
	body *gen.{{ .Resource.ModelRef | title | singularize }},
) (*gen.{{ .Resource.ModelRef | title | singularize }}, error)  {
	res, err := s.repo.Update(
		ctx,
		id,
	{{- range $propertyName, $property := .Model.Properties }}
		body.{{ $propertyName | camelcase }},
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.{{ .Model.Name | singularize | title }}{
	{{- range $propertyName, $property := .Model.Properties }}
		{{- if eq .Type "string" }}
		{{ $propertyName | camelcase }}: &res.{{ $propertyName | camelcase }}.String,
		{{- else }}
		{{ $propertyName | camelcase }}: res.{{ $propertyName | camelcase | id }},
		{{- end }}
	{{- end }}
	}, nil
}

func (s *Service) Delete{{ .Resource.ModelRef | title | singularize }}(
	ctx context.Context,
	{{- if eq .Resource.Security "BearerAuth"}}
	user *common.AuthUser,
	{{- end }}
	id string,
) error {
	err := s.repo.Delete(
		ctx,
		id,
	)

	return err
}