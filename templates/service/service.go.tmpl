package {{ .Model.Name | untitle | singularize }}

import (
	"context"
	
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/common"
)

type Create{{ .Model.Name | singularize | title }}Params struct {
	{{- range $propertyName, $property := .Model.Properties }}
	{{ $propertyName | camelcase | title | structFieldName }}{{- if .NotNull }} {{ .Type }}{{- else }}*{{ .Type }}{{- end }}
	{{- end }}
}

type Update{{ .Model.Name | singularize | title }}Params struct {
	ID int64
	{{- range $propertyName, $property := .Model.Properties }}
	{{ $propertyName | camelcase | title | structFieldName }}{{- if .NotNull }} {{ .Type }}{{- else }}*{{ .Type }}{{- end }}
	{{- end }}
}

type Service struct {
	repo *Repo
}

func NewService(
	repo *Repo,
) *Service {
	return &Service{
		repo: repo,
	}
}

func (s *Service) Create{{ .Model.Name | singularize | title }}(ctx context.Context, params *gen.Create{{ .Model.Name | singularize | title }}) (*gen.Create{{ .Model.Name | singularize | title }}Response, error) {
	res, err := s.repo.Create(
		ctx,
	{{- range $propertyName, $property := .Model.Properties }}
		params.{{ $propertyName | camelcase }},
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.Create{{ .Model.Name | singularize | title }}ResponseBody{
		// TODO: Implement this
	}, nil

	return nil, nil
}

func (s *Service) Update{{ .Model.Name | singularize | title }}(ctx context.Context, id int64, params *gen.Update{{ .Model.Name | singularize | title }}) (*gen.Update{{ .Model.Name | singularize | title }}Response, error) {
	res, err := s.repo.Update(
		ctx,
		id,
	{{- range $propertyName, $property := .Model.Properties }}
		params.{{ $propertyName | camelcase }},
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.Update{{ .Model.Name | singularize | title }}ResponseBody{
		// TODO: Implement this
	}, nil

	return nil, nil
}