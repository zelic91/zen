package {{ .CurrentPackage }}

import (
	"context"
	
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/common"
)

type Create{{ .CurrentModelName | singularize | title }}Params struct {
	{{- range $propertyName, $property := .CurrentModel.Properties }}
	{{ $propertyName | camelcase }} {{- if .NotNull }}{{ .Type }}{{- else }}*{{ .Type }}{{- end }}
	{{- end }}
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
	{{ $propertyName | camelcase }} {{- if .NotNull }} {{ .Type }}{{- else }}*{{ .Type }}{{- end }}
		{{- end }}
	{{- end }}
}

type Update{{ .CurrentModelName | singularize | title }}Params struct {
	ID int64
	{{- range $propertyName, $property := .CurrentModel.Properties }}
	{{ $propertyName | camelcase }} {{- if .NotNull }} {{ .Type }}{{- else }}*{{ .Type }}{{- end }}
	{{- end }}
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
	{{ $propertyName | camelcase }} {{- if .NotNull }} {{ .Type }}{{- else }}*{{ .Type }}{{- end }}
		{{- end }}
	{{- end }}
}

type service struct {
	repo *Repo
}

func NewService(
	repo *Repo,
) *service {
	return &service{
		repo: repo,
	}
}

/* For reference
func (s *service) Create{{ .CurrentModelName | singularize | title }}(ctx context.Context, params *gen.Create{{ .CurrentModelName | singularize | title }}) (*gen.Create{{ .CurrentModelName | singularize | title }}Response, error) {
	res, err := s.repo.Create(
		ctx,
	{{- range $propertyName, $property := .CurrentModel.Properties }}
		params.{{ $propertyName | camelcase }},
	{{- end }}
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
		params.{{ $propertyName | camelcase }},
		{{- end }}
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.Create{{ .CurrentModelName | singularize | title }}ResponseBody{
		// TODO: Implement this
	}, nil

	return nil, nil
}

func (s *service) Update{{ .CurrentModelName | singularize | title }}(ctx context.Context, id int64, params *gen.Update{{ .CurrentModelName | singularize | title }}) (*gen.Update{{ .CurrentModelName | singularize | title }}Response, error) {
	res, err := s.repo.Update(
		ctx,
		id,
	{{- range $propertyName, $property := .CurrentModel.Properties }}
		params.{{ $propertyName | camelcase }},
	{{- end }}
	{{- if eq .CurrentModel.Type "user" }}
		{{- range $propertyName, $property := userProperties }}
		params.{{ $propertyName | camelcase }},
		{{- end }}
	{{- end }}
	)

	if err != nil {
		log.Println(err)
		return nil, err
	}

	return &gen.Update{{ .CurrentModelName | singularize | title }}ResponseBody{
		// TODO: Implement this
	}, nil

	return nil, nil
}
*/

{{- range $service, $apiPaths := .ServiceOperationMap}}
	{{- if eq $service $.CurrentService.Name }}
		{{- range $apiPaths }}
func (s *service) {{ .OperationID }}(ctx context.Context{{- if eq .Security "BearerAuth"}}, user *common.AuthUser{{- end }}{{- if .RequestBody }}, body *gen.{{ .RequestBody }}{{- end }}) (*gen.{{ .ResponseBody }}, error) {
	return nil, nil
}
		{{- end}}
	{{- end }}
{{- end }}