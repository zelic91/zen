package {{ .CurrentPackage }}

import (
	"context"
	"errors"
	"fmt"
	"{{ .ModuleName }}/api/gen"
	"{{ .ModuleName }}/common"
	"{{ .ModuleName }}/db/postgres/dbgen"
{{- range $depServiceName, $methods := .CurrentService.Services }}
	"{{ $.ModuleName }}/{{ $depServiceName | untitle }}"
{{- end }}
{{- if eq .CurrentService.Type "auth" }}
	"github.com/lestrrat-go/jwx/jwt"
{{- end }}
)

{{- if eq .CurrentService.Type "auth" }}
type JWSValidator interface {
	ValidateJWS(jws string) (jwt.Token, error)
	GenerateJWS(info interface{}, permissions interface{}) (string, error)
}
{{- end }}

{{- range $depServiceName, $methods := .CurrentService.Services }}
type {{ $depServiceName }}Service interface {
	{{- range $methods }}
	{{ . }}()
	{{- end }}
}
{{- end }}

type service struct {
{{- if eq .CurrentService.Type "auth" }}
	authenticator JWSValidator
{{- else }}
	repo *Repo
{{- end }}
{{- range $depServiceName, $methods := .CurrentService.Services }}
	{{ $depServiceName | untitle }}Service {{ $depServiceName }}Service
{{- end }}
}

func NewService(
{{- if eq .CurrentService.Type "auth" }}
	authenticator JWSValidator,
{{- else }}
	repo *Repo,
{{- end }}
) *service {
	return &service{
	{{- if eq .CurrentService.Type "auth" }}
		authenticator: authenticator,
	{{- else }}
		repo: repo,
	{{- end }}
	}
}

{{- range .CurrentService.Methods }}
func (s *service) {{ . }} {

}
{{- end }}
